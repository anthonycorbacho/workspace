// Code generated by mockery v2.14.0. DO NOT EDIT.

package mock

import (
	dlock "github.com/anthonycorbacho/workspace/kit/distributedlock"
	mock "github.com/stretchr/testify/mock"
)

// DistributedLock is an autogenerated mock type for the DistributedLock type
type DistributedLock struct {
	mock.Mock
}

type DistributedLock_Expecter struct {
	mock *mock.Mock
}

func (_m *DistributedLock) EXPECT() *DistributedLock_Expecter {
	return &DistributedLock_Expecter{mock: &_m.Mock}
}

// New provides a mock function with given fields: value
func (_m *DistributedLock) New(value string) (dlock.Lock, error) {
	ret := _m.Called(value)

	var r0 dlock.Lock
	if rf, ok := ret.Get(0).(func(string) dlock.Lock); ok {
		r0 = rf(value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dlock.Lock)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DistributedLock_New_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'New'
type DistributedLock_New_Call struct {
	*mock.Call
}

// New is a helper method to define mock.On call
//  - value string
func (_e *DistributedLock_Expecter) New(value interface{}) *DistributedLock_New_Call {
	return &DistributedLock_New_Call{Call: _e.mock.On("New", value)}
}

func (_c *DistributedLock_New_Call) Run(run func(value string)) *DistributedLock_New_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *DistributedLock_New_Call) Return(_a0 dlock.Lock, _a1 error) *DistributedLock_New_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewDistributedLock interface {
	mock.TestingT
	Cleanup(func())
}

// NewDistributedLock creates a new instance of DistributedLock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDistributedLock(t mockConstructorTestingTNewDistributedLock) *DistributedLock {
	mock := &DistributedLock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
