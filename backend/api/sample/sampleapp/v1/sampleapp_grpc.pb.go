// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: sample/sampleapp/v1/sampleapp.proto

package sampleappv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SampleApp_Fetch_FullMethodName  = "/sample.sampleapp.v1.SampleApp/Fetch"
	SampleApp_Create_FullMethodName = "/sample.sampleapp.v1.SampleApp/Create"
	SampleApp_Delete_FullMethodName = "/sample.sampleapp.v1.SampleApp/Delete"
)

// SampleAppClient is the client API for SampleApp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SampleAppClient interface {
	// Fetch a single user.
	Fetch(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (*FetchResponse, error)
	// Create a user.
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	// Delete users.
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type sampleAppClient struct {
	cc grpc.ClientConnInterface
}

func NewSampleAppClient(cc grpc.ClientConnInterface) SampleAppClient {
	return &sampleAppClient{cc}
}

func (c *sampleAppClient) Fetch(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (*FetchResponse, error) {
	out := new(FetchResponse)
	err := c.cc.Invoke(ctx, SampleApp_Fetch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleAppClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, SampleApp_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleAppClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, SampleApp_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SampleAppServer is the server API for SampleApp service.
// All implementations must embed UnimplementedSampleAppServer
// for forward compatibility
type SampleAppServer interface {
	// Fetch a single user.
	Fetch(context.Context, *FetchRequest) (*FetchResponse, error)
	// Create a user.
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	// Delete users.
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	mustEmbedUnimplementedSampleAppServer()
}

// UnimplementedSampleAppServer must be embedded to have forward compatible implementations.
type UnimplementedSampleAppServer struct {
}

func (UnimplementedSampleAppServer) Fetch(context.Context, *FetchRequest) (*FetchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fetch not implemented")
}
func (UnimplementedSampleAppServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSampleAppServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSampleAppServer) mustEmbedUnimplementedSampleAppServer() {}

// UnsafeSampleAppServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SampleAppServer will
// result in compilation errors.
type UnsafeSampleAppServer interface {
	mustEmbedUnimplementedSampleAppServer()
}

func RegisterSampleAppServer(s grpc.ServiceRegistrar, srv SampleAppServer) {
	s.RegisterService(&SampleApp_ServiceDesc, srv)
}

func _SampleApp_Fetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleAppServer).Fetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SampleApp_Fetch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleAppServer).Fetch(ctx, req.(*FetchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SampleApp_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleAppServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SampleApp_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleAppServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SampleApp_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleAppServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SampleApp_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleAppServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SampleApp_ServiceDesc is the grpc.ServiceDesc for SampleApp service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SampleApp_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sample.sampleapp.v1.SampleApp",
	HandlerType: (*SampleAppServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Fetch",
			Handler:    _SampleApp_Fetch_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _SampleApp_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SampleApp_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sample/sampleapp/v1/sampleapp.proto",
}
